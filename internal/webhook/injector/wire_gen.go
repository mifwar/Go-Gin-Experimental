// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package webhook

import (
	"gorm.io/gorm"
	"online-course.mifwar.com/internal/cart/repository"
	cart2 "online-course.mifwar.com/internal/cart/usecase"
	"online-course.mifwar.com/internal/class_room/repository"
	class_room2 "online-course.mifwar.com/internal/class_room/usecase"
	"online-course.mifwar.com/internal/discount/repository"
	discount2 "online-course.mifwar.com/internal/discount/usecase"
	"online-course.mifwar.com/internal/order/repository"
	order2 "online-course.mifwar.com/internal/order/usecase"
	"online-course.mifwar.com/internal/order_detail/repository"
	order_detail2 "online-course.mifwar.com/internal/order_detail/usecase"
	"online-course.mifwar.com/internal/payment/usecase"
	"online-course.mifwar.com/internal/product/repository"
	product2 "online-course.mifwar.com/internal/product/usecase"
	"online-course.mifwar.com/internal/webhook/delivery/http"
	webhook2 "online-course.mifwar.com/internal/webhook/usecase"
	"online-course.mifwar.com/pkg/fileupload/cloudinary"
)

// Injectors from wire.go:

func InitializedService(db *gorm.DB) *webhook.WebhookHandler {
	orderRepository := order.NewOrderRepository(db)
	cartRepository := cart.NewCartRepository(db)
	cartUseCase := cart2.NewCartUseCase(cartRepository)
	discountRepository := discount.NewDiscountRepository(db)
	discountUseCase := discount2.NewDiscountUseCase(discountRepository)
	productRepository := product.NewProductRepository(db)
	fileUpload := fileupload.NewFileUpload()
	productUseCase := product2.NewProductUseCase(productRepository, fileUpload)
	orderDetailRepository := order_detail.NewOrderDetailRepository(db)
	orderDetailUseCase := order_detail2.NewOrderDetailUseCase(orderDetailRepository)
	paymentUseCase := payment.NewPaymentUseCase()
	orderUseCase := order2.NewOrderUseCase(orderRepository, cartUseCase, discountUseCase, productUseCase, orderDetailUseCase, paymentUseCase)
	classRoomRepository := class_room.NewClassRoomRepository(db)
	classRoomUseCase := class_room2.NewClassRoomUseCase(classRoomRepository)
	webhookUseCase := webhook2.NewWebhookUseCase(orderUseCase, classRoomUseCase)
	webhookHandler := webhook.NewWebHookHandler(webhookUseCase)
	return webhookHandler
}
